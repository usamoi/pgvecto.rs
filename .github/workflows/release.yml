name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Version
        required: true
      prerelease:
        type: boolean
        description: Prerelease
        required: true
        default: false

permissions:
  contents: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/github-script@v7
        with:
          script: |
            const r = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?/;
            if (!r.test("${{ github.event.inputs.version }}")) {
              core.setFailed(`Action failed with an invalid semver.`);
            }
      - run: |
          git config --global user.email "support@tensorchord.ai"
          git config --global user.name "CI[bot]"
      - run: ./scripts/ci_release.sh
        env:
          SEMVER: ${{ github.event.inputs.version }}
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
  binary:
    needs: ["release"]
    strategy:
      matrix:
        include:
          - { version: 14, platform: amd64, arch: x86_64 }
          - { version: 14, platform: arm64, arch: aarch64 }
          - { version: 15, platform: amd64, arch: x86_64 }
          - { version: 15, platform: arm64, arch: aarch64 }
          - { version: 16, platform: amd64, arch: x86_64 }
          - { version: 16, platform: arm64, arch: aarch64 }
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: v${{ github.event.inputs.version }}
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-pg${{ matrix.version }}-${{ hashFiles('./Cargo.lock') }}
          restore-keys: cargo-${{ runner.os }}-pg${{ matrix.version }}
      - name: Build Release
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker run --platform linux/${{ matrix.platform }} -it --rm -v ./:/mnt/build ubuntu:focal /bin/bash \
            -c "SEMVER=${{ github.event.inputs.version }} VERSION=${{ matrix.version }} ARCH=${{ matrix.arch }} PLATFORM=${{ matrix.platform }} bash /mnt/build/scripts/build_ubuntu:focal.sh"
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./build/vectors-pg${{ matrix.version }}_${{ github.event.inputs.version }}_${{ matrix.platform }}.deb
          asset_name: vectors-pg${{ matrix.version }}_${{ github.event.inputs.version }}_${{ matrix.platform }}.deb
          asset_content_type: application/vnd.debian.binary-package
  docker_binary_release:
    needs: ["release", "binary"]
    strategy:
      matrix:
        include:
          - { version: 14, platform: amd64, arch: x86_64 }
          - { version: 14, platform: arm64, arch: aarch64 }
          - { version: 15, platform: amd64, arch: x86_64 }
          - { version: 15, platform: arm64, arch: aarch64 }
          - { version: 16, platform: amd64, arch: x86_64 }
          - { version: 16, platform: arm64, arch: aarch64 }
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: v${{ github.event.inputs.version }}
      - name: Download
        run: wget -O pgvecto-rs-binary-release.deb https://github.com/tensorchord/pgvecto.rs/releases/download/v${{ github.event.inputs.version }}/vectors-pg${{ matrix.version }}_${{ github.event.inputs.version }}_${{ matrix.platform }}.deb
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push binary release to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/${{ matrix.platform }}"
          file: ./docker/pgvecto-rs-binary.Dockerfile
          tags: tensorchord/pgvecto-rs-binary:pg${{ matrix.version }}-v${{ github.event.inputs.version }}-${{ matrix.platform }}
  docker_release:
    needs: ["docker_binary_release"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { version: 14 }
          - { version: 15 }
          - { version: 16 }
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: v${{ github.event.inputs.version }}
      - name: Variables
        id: variables
        uses: actions/github-script@v6
        with:
          script: |
            let tags = [
              "tensorchord/pgvecto-rs:pg${{ matrix.version }}-v${{ github.event.inputs.version }}",
            ];
            // const actor = context.actor;
            // if (actor != "github-actions[bot]") {
            //   tags.push("tensorchord/pgvecto-rs:pg${{ matrix.version }}-latest");
            // }
            // if ("${{ matrix.latest }}" == "true" && actor != "github-actions[bot]") {
            //   tags.push("tensorchord/pgvecto-rs:latest");
            // }
            core.setOutput('tags', tags.join(", "));
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Push postgres with pgvecto.rs to Docker Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/pgvecto-rs.Dockerfile
          build-args: |
            TAG=pg${{ matrix.version }}-v${{ github.event.inputs.version }}
            POSTGRES_VERSION=${{ matrix.version }}
          tags: ${{ steps.variables.outputs.tags }}
